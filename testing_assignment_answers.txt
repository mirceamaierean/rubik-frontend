Testing is a fundamental part of the software development lifecycle, applied throughout the process to ensure that code behaves as expected, meets requirements, and is robust against errors. It is useful because it helps catch bugs early, improves code quality, increases confidence in the software, and makes future changes safer and easier to implement. Testing is typically applied during development (unit and integration testing), before release (system and acceptance testing), and sometimes after deployment (regression and monitoring tests).

The main features of my Bachelor thesis application include a user interface for uploading and analyzing Rubik's Cube images, a backend service for image processing and color detection, and an interactive cube viewer that allows users to manipulate and solve the cube. The application integrates real-time user input, communicates with a microservice for image analysis, and provides visual feedback and solution steps to the user. Key features include photo upload, color detection, cube state visualization, and algorithmic move execution.

During development, a combination of unit, integration, and system testing techniques should be used. 

Unit testing: For the cube manipulation logic, unit tests should verify that each move (e.g., R, L, U, D, F, B) correctly updates the cube's state. For example, a test could apply a sequence of moves to a solved cube and check that the resulting state matches the expected configuration. This ensures the core logic is reliable and mathematically correct.

Integration testing: Integration tests should focus on the interaction between the frontend, the image upload component, and the backend microservice. For instance, a test could simulate uploading a set of cube face images and verify that the detected colors are correctly received and rendered in the cube viewer. A suitable strategy is to use mock services or test environments to validate data flow and error handling between modules.

System testing: System tests should cover end-to-end scenarios such as a user uploading all cube face images, receiving the detected state, manually correcting colors, and following the solution steps to solve the cube. These tests ensure that the entire application works as intended from the user's perspective, including edge cases like incomplete uploads or invalid images. 